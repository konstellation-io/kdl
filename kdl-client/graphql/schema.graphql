type Query {
  me: User!
  projects: [Project!]!
  users: [User!]!
  sshKey: SSHKey!
}

type Mutation {
  addUser(input: AddUserInput!): User!
  removeUsers(input: RemoveUsersInput!): [User!]!
  updateAccessLevel(input: UpdateAccessLevelInput!): [User!]!
  regenerateSSHKey: SSHKey!
  createProject(input: CreateProjectInput!): Project!
  updateProject(input: UpdateProjectInput!): Project!
}

type SSHKey {
  public: String!
  private: String!
  creationDate: String!
  lastActivity: String
}

type User {
  id: ID!
  email: String!
  creationDate: String!
  accessLevel: AccessLevel!
  lastActivity: String
}

enum AccessLevel {
  VIEWER
  MANAGER
  ADMIN
}

input UpdateProjectInput {
  id: ID!
  name: String
  repository: UpdateProjectRepositoryInput
}

input UpdateProjectRepositoryInput {
  url: String!
}

input RemoveUsersInput {
  userIds: [ID!]!
}

input AddUserInput {
  email: String!
  accessLevel: AccessLevel!
}

input UpdateAccessLevelInput {
  userIds: [ID!]!
  accessLevel: AccessLevel!
}

input CreateProjectInput {
  name: String!
  description: String!
  repository: RepositoryInput!
}

type Project {
  id: ID!
  name: String!
  description: String!
  favorite: Boolean!
  repository: Repository
  state: ProjectState!
  creationDate: String!
  lastActivationDate: String!
  error: String
}

input RepositoryInput {
  type: RepositoryType!
  url: String!
}

type Repository {
  id: ID!
  type: RepositoryType!
  url: String!
  connected: Boolean!
}

enum RepositoryType {
  INTERNAL
  EXTERNAL
}

enum ProjectState {
  STARTED
  STOPPED
  ARCHIVED
}
